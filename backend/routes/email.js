const express = require('express');
const nodemailer = require('nodemailer');
const router = express.Router();

// Email sharing endpoint
router.post('/', async (req, res) => {
  try {
    const { recipients, summary, subject } = req.body;

    console.log('Email request received:', { recipients, subject, summaryLength: summary?.length });

    if (!recipients || !summary) {
      return res.status(400).json({ error: 'Recipients and summary are required' });
    }

    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return res.status(500).json({ error: 'Email credentials not configured' });
    }

    // Create transporter with more specific configuration
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      host: 'smtp.gmail.com',
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    // Verify transporter configuration
    try {
      await transporter.verify();
      console.log('SMTP connection verified');
    } catch (verifyError) {
      console.error('SMTP verification failed:', verifyError);
      return res.status(500).json({ 
        error: 'Email configuration error',
        details: 'Please check your email credentials. You may need to use an App Password instead of your regular Gmail password.'
      });
    }

    // Email options
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: recipients.join(', '),
      subject: subject || 'Meeting Summary',
      html: `
        <h2>Meeting Summary</h2>
        <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6;">
          ${summary.replace(/\n/g, '<br>')}
        </div>
        <hr>
        <p style="color: #666; font-size: 12px;">
          This summary was generated by AI Meeting Notes Summarizer
        </p>
      `
    };

    console.log('Sending email to:', recipients);
    
    // Send email
    const info = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', info.messageId);
    
    res.json({ message: 'Email sent successfully', messageId: info.messageId });

  } catch (error) {
    console.error('Email Error:', error);
    
    let errorMessage = 'Failed to send email';
    if (error.code === 'EAUTH') {
      errorMessage = 'Authentication failed. Please check your email credentials or use an App Password.';
    } else if (error.code === 'ENOTFOUND') {
      errorMessage = 'Network error. Please check your internet connection.';
    }
    
    res.status(500).json({ 
      error: errorMessage,
      details: error.message,
      code: error.code
    });
  }
});

module.exports = router;